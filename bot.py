from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime, timedelta
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import asyncio
import sys

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token="7780127425:AAH0Ll3vO6xiljTdJPIT-epdh-P5VgvZ8vY")
dp = Dispatcher()
scheduler = AsyncIOScheduler()

# –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
user_tasks = {}  # {user_id: {"today": [], "tomorrow": [], "week": [], "deadlines": {}}}

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class TaskStates(StatesGroup):
    waiting_task_type = State()
    waiting_task_text = State()
    waiting_deadline_text = State()
    waiting_deadline_date = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_main_keyboard():
    buttons = [
        [types.KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")],
        [types.KeyboardButton(text="üîÑ –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
        [types.KeyboardButton(text="‚è∞ –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω")],
        [types.KeyboardButton(text="üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë")]
    ]
    return types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_task_type_keyboard():
    buttons = [
        [types.KeyboardButton(text="–°–µ–≥–æ–¥–Ω—è")],
        [types.KeyboardButton(text="–ó–∞–≤—Ç—Ä–∞")],
        [types.KeyboardButton(text="–ù–µ–¥–µ–ª—è")],
        [types.KeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥")]
    ]
    return types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def get_cancel_keyboard():
    return types.ReplyKeyboardMarkup(
        keyboard=[[types.KeyboardButton(text="‚óÄÔ∏è –û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )

# –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä—É—Å—Å–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Å –∫–ª—é—á–∞–º–∏
task_type_mapping = {
    "–°–µ–≥–æ–¥–Ω—è": "today",
    "–ó–∞–≤—Ç—Ä–∞": "tomorrow",
    "–ù–µ–¥–µ–ª—è": "week"
}

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ
async def send_deadline_reminder(user_id: int, task: str):
    await bot.send_message(user_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ –¥–µ–¥–ª–∞–π–Ω –ø–æ –∑–∞–¥–∞—á–µ '{task}'")

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_tasks:
        user_tasks[user_id] = {"today": [], "tomorrow": [], "week": [], "deadlines": {}}
    
    await message.answer(
        "üìÖ <b>–£–º–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á</b>\n\n"
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤–∞—à–∏ –∑–∞–¥–∞—á–∏.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
@dp.message(lambda message: message.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
async def add_task_start(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞—á–∏:",
        reply_markup=get_task_type_keyboard()
    )

@dp.message(lambda message: message.text in task_type_mapping.keys())
async def add_task_type(message: types.Message, state: FSMContext):
    task_type_key = task_type_mapping[message.text]
    await state.update_data(task_type=task_type_key)
    await state.set_state(TaskStates.waiting_task_text)
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(TaskStates.waiting_task_text)
async def process_task_text(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    task_type = data["task_type"]
    
    if user_id not in user_tasks:
        user_tasks[user_id] = {"today": [], "tomorrow": [], "week": [], "deadlines": {}}
    
    user_tasks[user_id][task_type].append(message.text)
    
    await message.answer(
        f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ ({task_type}):\n{message.text}",
        reply_markup=get_main_keyboard()
    )
    await state.clear()

@dp.message(lambda message: message.text == "‚è∞ –î–æ–±–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω")
async def add_deadline_start(message: types.Message, state: FSMContext):
    await message.answer(
        "üìù –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É —Å –¥–µ–¥–ª–∞–π–Ω–æ–º:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(TaskStates.waiting_deadline_text)

@dp.message(TaskStates.waiting_deadline_text)
async def process_deadline_text(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –û—Ç–º–µ–Ω–∞":
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        await state.clear()
        return
    
    await state.update_data(task_text=message.text)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –¥–µ–¥–ª–∞–π–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(TaskStates.waiting_deadline_date)

@dp.message(TaskStates.waiting_deadline_date)
async def process_deadline_date(message: types.Message, state: FSMContext):
    if message.text == "‚óÄÔ∏è –û—Ç–º–µ–Ω–∞":
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_keyboard())
        await state.clear()
        return
    
    try:
        user_id = message.from_user.id
        data = await state.get_data()
        task_text = data["task_text"]
        deadline_date = datetime.strptime(message.text, "%d.%m.%Y").date()
        
        if user_id not in user_tasks:
            user_tasks[user_id] = {"today": [], "tomorrow": [], "week": [], "deadlines": {}}
        
        user_tasks[user_id]["deadlines"][task_text] = message.text
        
        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
        reminder_time = datetime.combine(deadline_date - timedelta(days=1), datetime.min.time())
        scheduler.add_job(
            send_deadline_reminder,
            'date',
            run_date=reminder_time,
            args=(user_id, task_text)
        )
        
        await message.answer(
            f"‚è∞ –î–µ–¥–ª–∞–π–Ω –¥–æ–±–∞–≤–ª–µ–Ω:\n{task_text} ‚Äî –¥–æ {message.text}",
            reply_markup=get_main_keyboard()
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        return
    
    await state.clear()

@dp.message(lambda message: message.text == "üîÑ –ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def show_all_tasks(message: types.Message):
    user_id = message.from_user.id
    tasks = user_tasks.get(user_id, {})
    
    response = []
    if tasks.get("today"):
        response.append("üìù <b>–°–µ–≥–æ–¥–Ω—è:</b>\n" + "\n".join(f"‚Ä¢ {task}" for task in tasks["today"]))
    if tasks.get("tomorrow"):
        response.append("\nüìÖ <b>–ó–∞–≤—Ç—Ä–∞:</b>\n" + "\n".join(f"‚Ä¢ {task}" for task in tasks["tomorrow"]))
    if tasks.get("week"):
        response.append("\nüóì <b>–ù–∞ –Ω–µ–¥–µ–ª—é:</b>\n" + "\n".join(f"‚Ä¢ {task}" for task in tasks["week"]))
    if tasks.get("deadlines"):
        response.append("\n‚è∞ <b>–î–µ–¥–ª–∞–π–Ω—ã:</b>\n" + "\n".join(f"‚Ä¢ {task} ‚Äî –¥–æ {date}" for task, date in tasks["deadlines"].items()))
    
    if response:
        await message.answer("\n".join(response), parse_mode="HTML")
    else:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á")

@dp.message(lambda message: message.text == "üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å—ë")
async def clear_all_tasks(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_tasks:
        user_tasks[user_id] = {"today": [], "tomorrow": [], "week": [], "deadlines": {}}
    await message.answer("üßπ –í—Å–µ –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!", reply_markup=get_main_keyboard())

@dp.message(lambda message: message.text in ["‚óÄÔ∏è –ù–∞–∑–∞–¥", "‚óÄÔ∏è –û—Ç–º–µ–Ω–∞"])
async def back_to_main(message: types.Message):
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )

# –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
async def shutdown():
    await bot.session.close()
    scheduler.shutdown()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    scheduler.start()
    await bot.delete_webhook(drop_pending_updates=True)
    
    try:
        await dp.start_polling(bot)
    except (KeyboardInterrupt, SystemExit):
        await shutdown()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        await shutdown()

if __name__ == '__main__':
    if sys.platform == 'win32':
        asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")